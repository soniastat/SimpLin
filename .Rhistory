omegasq_gamma0 = 0.25, omegasq_gamma1 = 0.25, omegasq_gamma2 = 0.25,
sigmasq_phi_init = 1, a_sigmaphi = 2, b_sigmaphi = 3,
omegasq_sigmaphi = 0.5, omegasq_phi = 0.25, Kbar = log_mean_norm_count_list1[[k]], pi = 0.5)
# Record the results
result_list1[[k]] <- result
}
# Create empty lists/matrices to store results
result_list2 <- list()
# Loop over 20 simulated datasets
for (k in 1:K)
{
set.seed(3567 + k)  # Set seed for reproducibility
# Run MCMC
result <- update_FEBKMR(niter = 2000, sim_data_list2[[k]], c = 0.7, tausq_init = 1,
r_init = c(0.5, 0.5, 0.5, 0.5, 0.5), beta_init = c(0, 0), phi_init = 1,
eta_init = rnorm(length(sim_data_list2[[k]][[1]]$y)), alpha_init = 1,
a_tau = 0, b_tau = 8, omegasq_r = 0.25,
a_mu = 1.5, sigmasq_mu = 0.25, omegasq_mu = 0.2,
omegasq_psi = 0.2, a_psi = 1.01, b_psi = 1,
mu_init = c(1, 1, 1, 1, 1), psi_init = c(1, 1, 1, 1, 1),
gamma0_init = 1, gamma1_init = 2, gamma2_init = 0.5,
sigmasq_gamma0 = 0.5, sigmasq_gamma1 = 0.5, sigmasq_gamma2 = 0.5,
omegasq_gamma0 = 0.25, omegasq_gamma1 = 0.25, omegasq_gamma2 = 0.25,
sigmasq_phi_init = 1, a_sigmaphi = 2, b_sigmaphi = 3,
omegasq_sigmaphi = 0.5, omegasq_phi = 0.25, Kbar = log_mean_norm_count_list2[[k]], pi = 0.5)
# Record the results
result_list2[[k]] <- result
}
# Create empty lists/matrices to store results
result_list3 <- list()
# Loop over 20 simulated datasets
for (k in 1:K)
{
set.seed(3567 + k)  # Set seed for reproducibility
# Run MCMC
result <- update_FEBKMR(niter = 2000, sim_data_list3[[k]], c = 0.7, tausq_init = 1,
r_init = c(0.5, 0.5, 0.5, 0.5, 0.5), beta_init = c(0, 0), phi_init = 1,
eta_init = rnorm(length(sim_data_list3[[k]][[1]]$y)), alpha_init = 1,
a_tau = 0, b_tau = 8, omegasq_r = 0.25,
a_mu = 1.5, sigmasq_mu = 0.25, omegasq_mu = 0.2,
omegasq_psi = 0.2, a_psi = 1.01, b_psi = 1,
mu_init = c(1, 1, 1, 1, 1), psi_init = c(1, 1, 1, 1, 1),
gamma0_init = 1, gamma1_init = 2, gamma2_init = 0.5,
sigmasq_gamma0 = 0.5, sigmasq_gamma1 = 0.5, sigmasq_gamma2 = 0.5,
omegasq_gamma0 = 0.25, omegasq_gamma1 = 0.25, omegasq_gamma2 = 0.25,
sigmasq_phi_init = 1, a_sigmaphi = 2, b_sigmaphi = 3,
omegasq_sigmaphi = 0.5, omegasq_phi = 0.25, Kbar = log_mean_norm_count_list3[[k]], pi = 0.5)
# Record the results
result_list3[[k]] <- result
}
# Create empty lists/matrices to store results
result_list4 <- list()
# Loop over 20 simulated datasets
for (k in 1:K)
{
set.seed(3567 + k)  # Set seed for reproducibility
# Run MCMC
result <- update_FEBKMR(niter = 2000, sim_data_list4[[k]], c = 0.7, tausq_init = 1,
r_init = c(0.5, 0.5, 0.5, 0.5, 0.5), beta_init = c(0, 0), phi_init = 1,
eta_init = rnorm(length(sim_data_list4[[k]][[1]]$y)), alpha_init = 1,
a_tau = 0, b_tau = 8, omegasq_r = 0.25,
a_mu = 1.5, sigmasq_mu = 0.25, omegasq_mu = 0.2,
omegasq_psi = 0.2, a_psi = 1.01, b_psi = 1,
mu_init = c(1, 1, 1, 1, 1), psi_init = c(1, 1, 1, 1, 1),
gamma0_init = 1, gamma1_init = 2, gamma2_init = 0.5,
sigmasq_gamma0 = 0.5, sigmasq_gamma1 = 0.5, sigmasq_gamma2 = 0.5,
omegasq_gamma0 = 0.25, omegasq_gamma1 = 0.25, omegasq_gamma2 = 0.25,
sigmasq_phi_init = 1, a_sigmaphi = 2, b_sigmaphi = 3,
omegasq_sigmaphi = 0.5, omegasq_phi = 0.25, Kbar = log_mean_norm_count_list4[[k]], pi = 0.5)
# Record the results
result_list4[[k]] <- result
}
J = 50
######################################
threshold <- 0.7
# Initialize a list to store the results for selected genes and estimated alphas
selected_genes_results1 <- list()
# Loop over the results
for (k in 1:K) {
result <- result_list1[[k]]
sim_data <- sim_data_list1[[k]]
# Initialize matrices to store results for this dataset
mean_alpha <- matrix(NA, nrow = length(sim_data), ncol = 2)
selected_genes <- rep(0, times = length(sim_data))
# Calculate mean alpha and check for selected genes
for (j in 1:length(sim_data))
{
mean_alpha[j, 1] <- mean(result$alpha_update[, j])
mean_alpha[j, 2] <- sim_data[[j]]$alpha_true
if (mean_alpha[j, 1] > threshold)
{
selected_genes[j] <- 1
}
}
# Store the results for this dataset
selected_genes_results1[[k]] <- list(mean_alpha = mean_alpha, selected_genes = selected_genes)
}
################################################
# Initialize variables
total_sel_genes_BKMR1 <- 0
total_sel_sig_genes_BKMR1 <- 0
total_sel_insig_genes_BKMR1 <- 0
total_sel_genes_deseq1 <- 0
total_sel_sig_genes_deseq1 <- 0
total_sel_insig_genes_deseq1 <- 0
# Loop over the selected genes results
for (k in 1:K) {
result_BKMR <- selected_genes_results1[[k]]
mean_alpha <- result_BKMR$mean_alpha
sel_genes_BKMR <- which(mean_alpha[, 1] > 0.7)
# Count selected genes with mean alpha > 0.7 but <= 10
sel_sig_genes_BKMR <- sel_genes_BKMR[sel_genes_BKMR <= 10]
sel_insig_genes_BKMR <- sel_genes_BKMR[sel_genes_BKMR > 10]
sel_genes_deseq <- sig_genes_deseq1[[k]]
sel_sig_genes_deseq <- sel_genes_deseq[sel_genes_deseq <= 10]
sel_insig_genes_deseq <- sel_genes_deseq[sel_genes_deseq > 10]
# Update total counts
total_sel_genes_BKMR1 <- total_sel_genes_BKMR1 + length(sel_genes_BKMR)
total_sel_genes_deseq1 <- total_sel_genes_deseq1 + length(sel_genes_deseq)
total_sel_sig_genes_BKMR1 <- total_sel_sig_genes_BKMR1 + length(sel_sig_genes_BKMR)
total_sel_sig_genes_deseq1 <- total_sel_sig_genes_deseq1 + length(sel_sig_genes_deseq)
total_sel_insig_genes_BKMR1 <- total_sel_insig_genes_BKMR1 + length(sel_insig_genes_BKMR)
total_sel_insig_genes_deseq1 <- total_sel_insig_genes_deseq1 + length(sel_insig_genes_deseq)
}
# Correctly identifying the genes ()
tot_sig_genes <- 10 * K
TDR_BKMR1 <- total_sel_sig_genes_BKMR1 / tot_sig_genes
TDR_BKMR1
TDR_deseq1 <- total_sel_sig_genes_deseq1 / tot_sig_genes
TDR_deseq1
# FDR
FDR_BKMR1 <- total_sel_insig_genes_BKMR1 / total_sel_genes_BKMR1
FDR_BKMR1
FDR_deseq1 <- total_sel_insig_genes_deseq1 / total_sel_genes_deseq1
FDR_deseq1
# Plot of Genes vs estimated alpha
plot_data_BKMR_all1 <- data.frame()
plot_data_deseq_all1 <- data.frame()
for (k in 1:K) {
result_plot <- selected_genes_results1[[k]]
mean_alpha_plot <- result_plot$mean_alpha
pvalue_deseq <- pvalue_deseq1[[k]]
plot_data_BKMR <- data.frame(
Genes = 1:50,
Estimated_Alpha = mean_alpha_plot[, 1],
Dataset = as.factor(k)  # Add dataset number as a factor
)
plot_data_deseq <- data.frame(
Genes = 1:50,
p_value = pvalue_deseq,
Dataset = as.factor(k)  # Add dataset number as a factor
)
# Append data to the main plot data frame
plot_data_BKMR_all1 <- rbind(plot_data_BKMR_all1, plot_data_BKMR)
plot_data_deseq_all1 <- rbind(plot_data_deseq_all1, plot_data_deseq)
}
# Plot genes vs estimated alpha for all datasets using ggplot2
p11 <- ggplot(plot_data_BKMR_all1, aes(x = Genes, y = Estimated_Alpha, color = Dataset)) +
geom_point() +
labs(x = "Genes", y = "Estimated Alpha") +
ggtitle("p-value from BKMR") +
geom_hline(yintercept = 0.7, linetype = "solid", color = "red") +
theme_minimal()
p12 <- ggplot(plot_data_deseq_all1, aes(x = Genes, y = p_value, color = Dataset)) +
geom_point() +
labs(x = "Genes", y = "p-value") +
ggtitle("p-value from DESeq2") +
geom_hline(yintercept = 0.05, linetype = "solid", color = "red") +
theme_minimal()
grid.arrange(p11, p12, ncol = 1)
#################################################
# Initialize a list to store the results for selected genes and estimated alphas
selected_genes_results2 <- list()
# Loop over the results
for (k in 1:K) {
result <- result_list2[[k]]
sim_data <- sim_data_list2[[k]]
# Initialize matrices to store results for this dataset
mean_alpha <- matrix(NA, nrow = length(sim_data), ncol = 2)
selected_genes <- rep(0, times = length(sim_data))
# Calculate mean alpha and check for selected genes
for (j in 1:length(sim_data))
{
mean_alpha[j, 1] <- mean(result$alpha_update[, j])
mean_alpha[j, 2] <- sim_data[[j]]$alpha_true
if (mean_alpha[j, 1] > threshold)
{
selected_genes[j] <- 1
}
}
# Store the results for this dataset
selected_genes_results2[[k]] <- list(mean_alpha = mean_alpha, selected_genes = selected_genes)
}
# Initialize variables
total_sel_genes_BKMR2 <- 0
total_sel_sig_genes_BKMR2 <- 0
total_sel_insig_genes_BKMR2 <- 0
total_sel_genes_deseq2 <- 0
total_sel_sig_genes_deseq2 <- 0
total_sel_insig_genes_deseq2 <- 0
# Loop over the selected genes results
for (k in 1:K) {
result_BKMR <- selected_genes_results2[[k]]
mean_alpha <- result_BKMR$mean_alpha
sel_genes_BKMR <- which(mean_alpha[, 1] > 0.7)
# Count selected genes with mean alpha > 0.7 but <= 10
sel_sig_genes_BKMR <- sel_genes_BKMR[sel_genes_BKMR <= 10]
sel_insig_genes_BKMR <- sel_genes_BKMR[sel_genes_BKMR > 10]
sel_genes_deseq <- sig_genes_deseq2[[k]]
sel_sig_genes_deseq <- sel_genes_deseq[sel_genes_deseq <= 10]
sel_insig_genes_deseq <- sel_genes_deseq[sel_genes_deseq > 10]
# Update total counts
total_sel_genes_BKMR2 <- total_sel_genes_BKMR2 + length(sel_genes_BKMR)
total_sel_genes_deseq2 <- total_sel_genes_deseq2 + length(sel_genes_deseq)
total_sel_sig_genes_BKMR2 <- total_sel_sig_genes_BKMR2 + length(sel_sig_genes_BKMR)
total_sel_sig_genes_deseq2 <- total_sel_sig_genes_deseq2 + length(sel_sig_genes_deseq)
total_sel_insig_genes_BKMR2 <- total_sel_insig_genes_BKMR2 + length(sel_insig_genes_BKMR)
total_sel_insig_genes_deseq2 <- total_sel_insig_genes_deseq2 + length(sel_insig_genes_deseq)
}
# Correctly identifying the genes ()
tot_sig_genes <- 10 * K
TDR_BKMR2 <- total_sel_sig_genes_BKMR2 / tot_sig_genes
TDR_BKMR2
TDR_deseq2 <- total_sel_sig_genes_deseq2 / tot_sig_genes
TDR_deseq2
# FDR
FDR_BKMR2 <- total_sel_insig_genes_BKMR2 / total_sel_genes_BKMR2
FDR_BKMR2
FDR_deseq2 <- total_sel_insig_genes_deseq2 / total_sel_genes_deseq2
FDR_deseq2
# Plot of Genes vs estimated alpha
plot_data_BKMR_all2 <- data.frame()
plot_data_deseq_all2 <- data.frame()
for (k in 1:K) {
result_plot <- selected_genes_results2[[k]]
mean_alpha_plot <- result_plot$mean_alpha
pvalue_deseq <- pvalue_deseq2[[k]]
plot_data_BKMR <- data.frame(
Genes = 1:50,
Estimated_Alpha = mean_alpha_plot[, 1],
Dataset = as.factor(k)  # Add dataset number as a factor
)
plot_data_deseq <- data.frame(
Genes = 1:50,
p_value = pvalue_deseq,
Dataset = as.factor(k)  # Add dataset number as a factor
)
# Append data to the main plot data frame
plot_data_BKMR_all2 <- rbind(plot_data_BKMR_all2, plot_data_BKMR)
plot_data_deseq_all2 <- rbind(plot_data_deseq_all2, plot_data_deseq)
}
# Plot genes vs estimated alpha for all datasets using ggplot2
p21 <- ggplot(plot_data_BKMR_all2, aes(x = Genes, y = Estimated_Alpha, color = Dataset)) +
geom_point() +
labs(x = "Genes", y = "Estimated Alpha") +
ggtitle("p-value from BKMR") +
geom_hline(yintercept = 0.7, linetype = "solid", color = "red") +
theme_minimal()
p22 <- ggplot(plot_data_deseq_all2, aes(x = Genes, y = p_value, color = Dataset)) +
geom_point() +
labs(x = "Genes", y = "p-value") +
ggtitle("p-value from DESeq2") +
geom_hline(yintercept = 0.05, linetype = "solid", color = "red") +
theme_minimal()
grid.arrange(p21, p22, ncol = 1)
################################################################################
# Initialize a list to store the results for selected genes and estimated alphas
selected_genes_results3 <- list()
# Loop over the results
for (k in 1:K) {
result <- result_list3[[k]]
sim_data <- sim_data_list3[[k]]
# Initialize matrices to store results for this dataset
mean_alpha <- matrix(NA, nrow = length(sim_data), ncol = 2)
selected_genes <- rep(0, times = length(sim_data))
# Calculate mean alpha and check for selected genes
for (j in 1:length(sim_data))
{
mean_alpha[j, 1] <- mean(result$alpha_update[, j])
mean_alpha[j, 2] <- sim_data[[j]]$alpha_true
if (mean_alpha[j, 1] > threshold)
{
selected_genes[j] <- 1
}
}
# Store the results for this dataset
selected_genes_results3[[k]] <- list(mean_alpha = mean_alpha, selected_genes = selected_genes)
}
# Initialize variables
total_sel_genes_BKMR3 <- 0
total_sel_sig_genes_BKMR3 <- 0
total_sel_insig_genes_BKMR3 <- 0
total_sel_genes_deseq3 <- 0
total_sel_sig_genes_deseq3 <- 0
total_sel_insig_genes_deseq3 <- 0
# Loop over the selected genes results
for (k in 1:K) {
result_BKMR <- selected_genes_results3[[k]]
mean_alpha <- result_BKMR$mean_alpha
sel_genes_BKMR <- which(mean_alpha[, 1] > 0.7)
# Count selected genes with mean alpha > 0.7 but <= 10
sel_sig_genes_BKMR <- sel_genes_BKMR[sel_genes_BKMR <= 10]
sel_insig_genes_BKMR <- sel_genes_BKMR[sel_genes_BKMR > 10]
sel_genes_deseq <- sig_genes_deseq3[[k]]
sel_sig_genes_deseq <- sel_genes_deseq[sel_genes_deseq <= 10]
sel_insig_genes_deseq <- sel_genes_deseq[sel_genes_deseq > 10]
# Update total counts
total_sel_genes_BKMR3 <- total_sel_genes_BKMR3 + length(sel_genes_BKMR)
total_sel_genes_deseq3 <- total_sel_genes_deseq3 + length(sel_genes_deseq)
total_sel_sig_genes_BKMR3 <- total_sel_sig_genes_BKMR3 + length(sel_sig_genes_BKMR)
total_sel_sig_genes_deseq3 <- total_sel_sig_genes_deseq3 + length(sel_sig_genes_deseq)
total_sel_insig_genes_BKMR3 <- total_sel_insig_genes_BKMR3 + length(sel_insig_genes_BKMR)
total_sel_insig_genes_deseq3 <- total_sel_insig_genes_deseq3 + length(sel_insig_genes_deseq)
}
# Correctly identifying the genes ()
tot_sig_genes <- 10 * K
TDR_BKMR3 <- total_sel_sig_genes_BKMR3 / tot_sig_genes
TDR_BKMR3
TDR_deseq3 <- total_sel_sig_genes_deseq3 / tot_sig_genes
TDR_deseq3
# FDR
FDR_BKMR3 <- total_sel_insig_genes_BKMR3 / total_sel_genes_BKMR3
FDR_BKMR3
FDR_deseq3 <- total_sel_insig_genes_deseq3 / total_sel_genes_deseq3
FDR_deseq3
# Plot of Genes vs estimated alpha
plot_data_BKMR_all3 <- data.frame()
plot_data_deseq_all3 <- data.frame()
for (k in 1:K) {
result_plot <- selected_genes_results3[[k]]
mean_alpha_plot <- result_plot$mean_alpha
pvalue_deseq <- pvalue_deseq3[[k]]
plot_data_BKMR <- data.frame(
Genes = 1:50,
Estimated_Alpha = mean_alpha_plot[, 1],
Dataset = as.factor(k)  # Add dataset number as a factor
)
plot_data_deseq <- data.frame(
Genes = 1:50,
p_value = pvalue_deseq,
Dataset = as.factor(k)  # Add dataset number as a factor
)
# Append data to the main plot data frame
plot_data_BKMR_all3 <- rbind(plot_data_BKMR_all3, plot_data_BKMR)
plot_data_deseq_all3 <- rbind(plot_data_deseq_all3, plot_data_deseq)
}
# Plot genes vs estimated alpha for all datasets using ggplot2
p31 <- ggplot(plot_data_BKMR_all3, aes(x = Genes, y = Estimated_Alpha, color = Dataset)) +
geom_point() +
labs(x = "Genes", y = "Estimated Alpha") +
ggtitle("p-value from BKMR") +
geom_hline(yintercept = 0.7, linetype = "solid", color = "red") +
theme_minimal()
p32 <- ggplot(plot_data_deseq_all3, aes(x = Genes, y = p_value, color = Dataset)) +
geom_point() +
labs(x = "Genes", y = "p-value") +
ggtitle("p-value from DESeq2") +
geom_hline(yintercept = 0.05, linetype = "solid", color = "red") +
theme_minimal()
grid.arrange(p31, p32, ncol = 1)
#################################################################################
# Initialize a list to store the results for selected genes and estimated alphas
selected_genes_results4 <- list()
# Loop over the results
for (k in 1:K) {
result <- result_list4[[k]]
sim_data <- sim_data_list4[[k]]
# Initialize matrices to store results for this dataset
mean_alpha <- matrix(NA, nrow = length(sim_data), ncol = 2)
selected_genes <- rep(0, times = length(sim_data))
# Calculate mean alpha and check for selected genes
for (j in 1:length(sim_data))
{
mean_alpha[j, 1] <- mean(result$alpha_update[, j])
mean_alpha[j, 2] <- sim_data[[j]]$alpha_true
if (mean_alpha[j, 1] > threshold)
{
selected_genes[j] <- 1
}
}
# Store the results for this dataset
selected_genes_results4[[k]] <- list(mean_alpha = mean_alpha, selected_genes = selected_genes)
}
# Initialize variables
total_sel_genes_BKMR4 <- 0
total_sel_sig_genes_BKMR4 <- 0
total_sel_insig_genes_BKMR4 <- 0
total_sel_genes_deseq4 <- 0
total_sel_sig_genes_deseq4 <- 0
total_sel_insig_genes_deseq4 <- 0
# Loop over the selected genes results
for (k in 1:K) {
result_BKMR <- selected_genes_results4[[k]]
mean_alpha <- result_BKMR$mean_alpha
sel_genes_BKMR <- which(mean_alpha[, 1] > 0.7)
# Count selected genes with mean alpha > 0.7 but <= 10
sel_sig_genes_BKMR <- sel_genes_BKMR[sel_genes_BKMR <= 10]
sel_insig_genes_BKMR <- sel_genes_BKMR[sel_genes_BKMR > 10]
sel_genes_deseq <- sig_genes_deseq4[[k]]
sel_sig_genes_deseq <- sel_genes_deseq[sel_genes_deseq <= 10]
sel_insig_genes_deseq <- sel_genes_deseq[sel_genes_deseq > 10]
# Update total counts
total_sel_genes_BKMR4 <- total_sel_genes_BKMR4 + length(sel_genes_BKMR)
total_sel_genes_deseq4 <- total_sel_genes_deseq4 + length(sel_genes_deseq)
total_sel_sig_genes_BKMR4 <- total_sel_sig_genes_BKMR4 + length(sel_sig_genes_BKMR)
total_sel_sig_genes_deseq4 <- total_sel_sig_genes_deseq4 + length(sel_sig_genes_deseq)
total_sel_insig_genes_BKMR4 <- total_sel_insig_genes_BKMR4 + length(sel_insig_genes_BKMR)
total_sel_insig_genes_deseq4 <- total_sel_insig_genes_deseq4 + length(sel_insig_genes_deseq)
}
# Correctly identifying the genes ()
tot_sig_genes <- 10 * K
TDR_BKMR4 <- total_sel_sig_genes_BKMR4 / tot_sig_genes
TDR_BKMR4
TDR_deseq4 <- total_sel_sig_genes_deseq4 / tot_sig_genes
TDR_deseq4
# FDR
FDR_BKMR4 <- total_sel_insig_genes_BKMR4 / total_sel_genes_BKMR4
FDR_BKMR4
FDR_deseq4 <- total_sel_insig_genes_deseq4 / total_sel_genes_deseq4
FDR_deseq4
# Plot of Genes vs estimated alpha
plot_data_BKMR_all4 <- data.frame()
plot_data_deseq_all4 <- data.frame()
for (k in 1:K) {
result_plot <- selected_genes_results4[[k]]
mean_alpha_plot <- result_plot$mean_alpha
pvalue_deseq <- pvalue_deseq4[[k]]
plot_data_BKMR <- data.frame(
Genes = 1:50,
Estimated_Alpha = mean_alpha_plot[, 1],
Dataset = as.factor(k)  # Add dataset number as a factor
)
plot_data_deseq <- data.frame(
Genes = 1:50,
p_value = pvalue_deseq,
Dataset = as.factor(k)  # Add dataset number as a factor
)
# Append data to the main plot data frame
plot_data_BKMR_all4 <- rbind(plot_data_BKMR_all4, plot_data_BKMR)
plot_data_deseq_all4 <- rbind(plot_data_deseq_all4, plot_data_deseq)
}
# Plot genes vs estimated alpha for all datasets using ggplot2
p41 <- ggplot(plot_data_BKMR_all4, aes(x = Genes, y = Estimated_Alpha, color = Dataset)) +
geom_point() +
labs(x = "Genes", y = "Estimated Alpha") +
ggtitle("p-value from BKMR") +
geom_hline(yintercept = 0.7, linetype = "solid", color = "red") +
theme_minimal()
p42 <- ggplot(plot_data_deseq_all4, aes(x = Genes, y = p_value, color = Dataset)) +
geom_point() +
labs(x = "Genes", y = "p-value") +
ggtitle("p-value from DESeq2") +
geom_hline(yintercept = 0.05, linetype = "solid", color = "red") +
theme_minimal()
grid.arrange(p41, p42, ncol = 1)
# Initialize a list to store the results for selected genes and estimated alphas
selected_genes_results5 <- list()
# Loop over the results
for (k in 1:K) {
result <- result_list5[[k]]
sim_data <- sim_data_list5[[k]]
# Initialize matrices to store results for this dataset
mean_alpha <- matrix(NA, nrow = length(sim_data), ncol = 2)
selected_genes <- rep(0, times = length(sim_data))
# Calculate mean alpha and check for selected genes
for (j in 1:length(sim_data))
{
mean_alpha[j, 1] <- mean(result$alpha_update[, j])
mean_alpha[j, 2] <- sim_data[[j]]$alpha_true
if (mean_alpha[j, 1] > threshold)
{
selected_genes[j] <- 1
}
}
# Store the results for this dataset
selected_genes_results5[[k]] <- list(mean_alpha = mean_alpha, selected_genes = selected_genes)
}
# Plot of Genes vs estimated alpha
plot_data_BKMR_all1 <- data.frame()
plot_data_deseq_all1 <- data.frame()
for (k in 1:K) {
result_plot <- selected_genes_results1[[k]]
mean_alpha_plot <- result_plot$mean_alpha
pvalue_deseq <- pvalue_deseq1[[k]]
plot_data_BKMR <- data.frame(
Genes = 1:50,
Estimated_Alpha = mean_alpha_plot[, 1],
Dataset = as.factor(k)  # Add dataset number as a factor
)
plot_data_deseq <- data.frame(
Genes = 1:50,
p_value = pvalue_deseq,
Dataset = as.factor(k)  # Add dataset number as a factor
)
# Append data to the main plot data frame
plot_data_BKMR_all1 <- rbind(plot_data_BKMR_all1, plot_data_BKMR)
plot_data_deseq_all1 <- rbind(plot_data_deseq_all1, plot_data_deseq)
}
# Plot genes vs estimated alpha for all datasets using ggplot2
p11 <- ggplot(plot_data_BKMR_all1, aes(x = Genes, y = Estimated_Alpha, color = Dataset)) +
geom_point() +
labs(x = "Genes", y = "Estimated Alpha") +
ggtitle("p-value from BKMR") +
geom_hline(yintercept = 0.7, linetype = "solid", color = "red") +
theme_minimal()
p12 <- ggplot(plot_data_deseq_all1, aes(x = Genes, y = p_value, color = Dataset)) +
geom_point() +
labs(x = "Genes", y = "p-value") +
ggtitle("p-value from DESeq2") +
geom_hline(yintercept = 0.05, linetype = "solid", color = "red") +
theme_minimal()
grid.arrange(p11, p12, ncol = 1)
